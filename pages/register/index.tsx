import { yupResolver } from "@hookform/resolvers/yup"
import Head from "next/head"
import { useRouter } from "next/router"
import { useState } from "react"
import { FormProvider, useForm } from "react-hook-form"
import * as yup from "yup"

import Spinner from "../../components/spinner"
import Toast from "../../components/toast"
import ToastHandler from "../../components/toast/toast-handler"
import { useToast } from "../../providers/toast.provider"
import { requestHelper } from "../../services/requestHelper"
import TokenService from "../../services/token.service"
import { useErrorHandler } from "../../services/useErrorHandler"

interface FormValues {
  displayName: string
  email: string
  password: string
}

export default function Register() {
  const { errorHandler } = useErrorHandler()
  const [isLoading, setIsLoading] = useState(false)
  const schema = yup.object().shape({
    displayName: yup.string().required("Required Field"),
    email: yup.string().email("Not a Valid E-mail").required("Required Field"),
    password: yup.string().required("Required Field"),
  })

  const form = useForm<FormValues>({ resolver: yupResolver(schema) })
  const {
    handleSubmit,
    register,
    formState: { errors },
  } = form

  const router = useRouter()
  const tokenservice = new TokenService()
  const { createToast } = useToast()

  const login = (data: FormValues) => {
    setIsLoading(true)
    errorHandler(
      async () => {
        await requestHelper.register(
          data.displayName,
          data.email,
          data.password
        )
        const token = await requestHelper.login(data.email, data.password)
        await tokenservice.saveToken(token.access_token)
        createToast({
          title: "Success",
          expiration: 10000,
          type: "success",
          subtitle: "You have successfully created your account.",
        })
        router.push("/")
      },
      {
        onError: () => {
          setIsLoading(false)
        },
      }
    )
  }

  return (
    <div className="flex h-screen w-screen flex-col items-center justify-center dark:bg-[#222] dark:text-gray-50">
      <Head>
        <title>NoteBox - Register</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, user-scalable=no" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {!isLoading ? (
        <>
          <FormProvider {...form}>
            <form
              onSubmit={handleSubmit((data) => login(data))}
              className="flex flex-col space-y-3"
            >
              <p className="text-2xl font-bold">Register</p>
              <div className="">
                <input
                  type="text"
                  placeholder="Full Name"
                  {...register("displayName")}
                  className="rounded-md bg-gray-100 py-1 px-3 outline-none dark:bg-[#333] dark:text-gray-50"
                />
                {errors.displayName?.message && (
                  <p className="mt-0.5 pl-2 text-xs text-rose-500">
                    {errors.displayName.message}
                  </p>
                )}
              </div>
              <div className="">
                <input
                  type="text"
                  placeholder="E-mail"
                  {...register("email")}
                  className="rounded-md bg-gray-100 py-1 px-3 outline-none dark:bg-[#333] dark:text-gray-50"
                />
                {errors.email?.message && (
                  <p className="mt-0.5 pl-2 text-xs text-rose-500">
                    {errors.email.message}
                  </p>
                )}
              </div>
              <div className="">
                <input
                  type="password"
                  placeholder="Password"
                  {...register("password")}
                  className="rounded-md bg-gray-100 py-1 px-3 outline-none dark:bg-[#333] dark:text-gray-50"
                />
                {errors.password?.message && (
                  <p className="mt-0.5 pl-2 text-xs text-rose-500">
                    {errors.password.message}
                  </p>
                )}
              </div>
              <button className="rounded-md bg-blue-500 px-2 py-1 text-white hover:bg-blue-600">
                Register
              </button>
            </form>
          </FormProvider>
          <p className="mt-4 text-sm text-gray-500 dark:text-gray-50">
            Already have an account?{" "}
            <span
              onClick={() => {
                router.push("/login")
              }}
              className="cursor-pointer text-blue-500 hover:underline"
            >
              Login
            </span>
          </p>
        </>
      ) : (
        <Spinner />
      )}
      <ToastHandler position="topRight" toastComponent={Toast} />
    </div>
  )
}
